function PolynomialExpansion(str) {
    // Remove spaces
    str = str.replace(/\s/g, '');
    
    // Extract the two factors
    const match = str.match(/\(([^)]+)\)\(([^)]+)\)/);
    if (!match) return "Invalid format";
    
    const poly1 = match[1];
    const poly2 = match[2];
    
    // Get the variable (x, y, etc.)
    const variable = str.match(/[a-z]/i)[0];
    
    // Parse polynomials into terms
    const terms1 = parsePoly(poly1, variable);
    const terms2 = parsePoly(poly2, variable);
    
    console.log("Poly1 terms:", terms1);
    console.log("Poly2 terms:", terms2);
    
    // Multiply all terms
    const products = [];
    for (const t1 of terms1) {
        for (const t2 of terms2) {
            const coeff = t1.coeff * t2.coeff;
            const exp = t1.exp + t2.exp;
            products.push({ coeff, exp });
        }
    }
    
    // Combine like terms
    const combined = {};
    for (const term of products) {
        if (combined[term.exp] === undefined) {
            combined[term.exp] = term.coeff;
        } else {
            combined[term.exp] += term.coeff;
        }
    }
    
    // Convert to array and sort by exponent descending
    const finalTerms = [];
    for (const exp in combined) {
        if (combined[exp] !== 0) {
            finalTerms.push({ coeff: combined[exp], exp: parseInt(exp) });
        }
    }
    finalTerms.sort((a, b) => b.exp - a.exp);
    
    // Format the result
    return formatResult(finalTerms, variable);
}

function parsePoly(polyStr, variable) {
    const terms = [];
    
    // Add leading + if needed for easier parsing
    let str = polyStr;
    if (str[0] !== '+' && str[0] !== '-') {
        str = '+' + str;
    }
    
    // Split into terms while preserving signs
    const termStrs = str.match(/[+-][^+-]+/g) || [];
    
    for (const termStr of termStrs) {
        const term = parseTerm(termStr, variable);
        terms.push(term);
    }
    
    return terms;
}

function parseTerm(termStr, variable) {
    const sign = termStr[0] === '-' ? -1 : 1;
    let content = termStr.slice(1);
    
    // Handle special cases
    if (content === '') return { coeff: sign, exp: 0 };
    
    // Use regex to parse the entire term
    // Patterns: 
    // - "2x^-2" -> coefficient: 2, exponent: -2
    // - "x" -> coefficient: 1, exponent: 1  
    // - "2x" -> coefficient: 2, exponent: 1
    // - "2" -> coefficient: 2, exponent: 0
    // - "x^3" -> coefficient: 1, exponent: 3
    
    const pattern = new RegExp(`^(\\d*)${variable}(\\^([-+]?\\d+))?$|^(\\d+)$`);
    const match = content.match(pattern);
    
    if (!match) {
        // If no match, try simpler patterns
        if (content === variable) {
            return { coeff: sign * 1, exp: 1 };
        }
        return { coeff: sign * parseInt(content), exp: 0 };
    }
    
    let coeff, exp;
    
    if (match[4]) {
        // Constant term like "2", "45"
        coeff = parseInt(match[4]);
        exp = 0;
    } else {
        // Variable term
        coeff = match[1] === '' ? 1 : parseInt(match[1]);
        
        if (match[3]) {
            // Has exponent like x^3 or x^-2
            exp = parseInt(match[3]);
        } else {
            // No exponent, default to 1
            exp = 1;
        }
    }
    
    return { coeff: sign * coeff, exp: exp };
}

function formatResult(terms, variable) {
    if (terms.length === 0) return "0";
    
    const parts = [];
    
    for (let i = 0; i < terms.length; i++) {
        const term = terms[i];
        let part = '';
        
        // Handle coefficient
        if (term.coeff === 1) {
            if (term.exp === 0) {
                part = '1';
            } else {
                part = '';
            }
        } else if (term.coeff === -1) {
            if (term.exp === 0) {
                part = '-1';
            } else {
                part = '-';
            }
        } else {
            part = term.coeff.toString();
        }
        
        // Handle variable and exponent
        if (term.exp !== 0) {
            part += variable;
            if (term.exp !== 1) {
                part += '^' + term.exp;
            }
        }
        
        // Handle sign for non-first terms
        if (i > 0 && term.coeff > 0) {
            part = '+' + part;
        }
        
        parts.push(part);
    }
    
    return parts.join('');
}

// Test cases
console.log("Test 1:", PolynomialExpansion("(1x)(2x^-2+1)"));    // Should be: "x+2x^-1"
console.log("Test 2:", PolynomialExpansion("(-1x^3)(3x^3+2)"));  // Should be: "-3x^6-2x^3"
console.log("Test 3:", PolynomialExpansion("(2x^2+4)(6x^3+3)")); // Should be: "12x^5+24x^3+6x^2+12"
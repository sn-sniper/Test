function PolynomialExpansion(str) {
    // Remove spaces and split into two factors
    const cleanStr = str.replace(/\s/g, '');
    const factors = cleanStr.match(/\(([^)]+)\)/g);
    
    if (!factors || factors.length !== 2) {
        throw new Error("Invalid input format");
    }
    
    // Parse both polynomials
    const poly1 = parsePolynomial(factors[0].slice(1, -1));
    const poly2 = parsePolynomial(factors[1].slice(1, -1));
    
    // Multiply polynomials
    const resultTerms = [];
    
    for (const term1 of poly1) {
        for (const term2 of poly2) {
            // Multiply coefficients
            const coeff = term1.coeff * term2.coeff;
            
            // Handle exponents - both terms have variables
            let exp = term1.exp + term2.exp;
            
            resultTerms.push({
                coeff: coeff,
                exp: exp,
                hasVar: exp !== 0
            });
        }
    }
    
    // Combine like terms
    const combined = {};
    for (const term of resultTerms) {
        const key = term.exp;
        if (combined[key] !== undefined) {
            combined[key] += term.coeff;
        } else {
            combined[key] = term.coeff;
        }
    }
    
    // Convert back to term objects and filter out zero coefficients
    const finalTerms = [];
    for (const [exp, coeff] of Object.entries(combined)) {
        if (coeff !== 0) {
            finalTerms.push({
                coeff: coeff,
                exp: parseInt(exp),
                hasVar: parseInt(exp) !== 0
            });
        }
    }
    
    // Sort by exponent descending
    finalTerms.sort((a, b) => b.exp - a.exp);
    
    // Format output
    return formatTerms(finalTerms);
}

function parsePolynomial(polyStr) {
    const terms = [];
    let current = '';
    const variable = polyStr.match(/[a-z]/i)?.[0] || 'x';
    
    // Add explicit + for easier parsing
    let modifiedStr = polyStr;
    if (modifiedStr[0] !== '-') {
        modifiedStr = '+' + modifiedStr;
    }
    
    // Split by + and - while keeping the signs
    const termMatches = modifiedStr.match(/[+-][^+-]*/g) || [];
    
    for (const match of termMatches) {
        if (match) {
            terms.push(parseTerm(match, variable));
        }
    }
    
    return terms;
}

function parseTerm(termStr, variable) {
    // Handle standalone signs
    if (termStr === '+') return { coeff: 1, exp: 0, hasVar: false };
    if (termStr === '-') return { coeff: -1, exp: 0, hasVar: false };
    
    // Extract the sign
    const sign = termStr[0] === '-' ? -1 : 1;
    const content = termStr.slice(1);
    
    if (content === '') {
        return { coeff: sign, exp: 0, hasVar: false };
    }
    
    // Check if term contains the variable
    const varIndex = content.indexOf(variable);
    const hasVar = varIndex !== -1;
    
    let coeff, exp;
    
    if (!hasVar) {
        // Constant term
        coeff = sign * parseInt(content);
        exp = 0;
    } else {
        // Term with variable
        const beforeVar = content.slice(0, varIndex);
        const afterVar = content.slice(varIndex + 1);
        
        // Parse coefficient
        if (beforeVar === '') {
            coeff = sign * 1;
        } else {
            coeff = sign * parseInt(beforeVar);
        }
        
        // Parse exponent
        if (afterVar === '') {
            exp = 1;
        } else if (afterVar[0] === '^') {
            exp = parseInt(afterVar.slice(1));
        } else {
            exp = 1;
        }
    }
    
    return { coeff, exp, hasVar };
}

function formatTerms(terms) {
    if (terms.length === 0) return "0";
    
    const result = [];
    
    for (const term of terms) {
        let termStr = '';
        
        // Handle coefficient
        if (term.coeff === 1) {
            termStr = term.hasVar ? '' : '1';
        } else if (term.coeff === -1) {
            termStr = term.hasVar ? '-' : '-1';
        } else {
            termStr = term.coeff.toString();
        }
        
        // Handle variable and exponent
        if (term.hasVar) {
            // Special case: if coefficient was Â±1 and we have variable
            if ((term.coeff === 1 || term.coeff === -1) && termStr === '') {
                termStr = 'x';
            } else if ((term.coeff === 1 || term.coeff === -1) && termStr === '-') {
                termStr = '-x';
            } else {
                termStr += 'x';
            }
            
            if (term.exp !== 1) {
                termStr += '^' + term.exp;
            }
        }
        
        // Add sign for positive terms (except first term)
        if (term.coeff > 0 && result.length > 0) {
            termStr = '+' + termStr;
        }
        
        result.push(termStr);
    }
    
    return result.join('');
}